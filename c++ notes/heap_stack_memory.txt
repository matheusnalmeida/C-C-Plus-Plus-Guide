##Introducao##
-Uma parte extremamente importante para a execução de um algoritimo é a memoria ram, pois é nela que são carregados todos os dados do nosso programa, como por exemplo, as variaveis. Quando nosso programa é iniciado, o sistema operacional ira alocar uma parte da memoria para que seja executado o programa, sendo essa regiao dividida em varias aréas, e as duas mais citadas sao justamente a stack e a heap, amsbas sendo localizadas na memoria ram, porem em aréas diferentes da mesma. Ambas essas areas podem armazenar dados do nosso programa, porém cada uma trabalho de uma maneira diferente em relação a outra.

##Processo de alocação de memoria##

1)Stack: Para alocarmos memoria stack, somente é necessario realizarmos uma simples atribuicao a uma determinada variavel.
Ex: int a = 5;

2) A alocacao na memoria heap funciona de uma maneira diferente, para isso utilizamos a keyword "new". A keyword "new" basicamente ira chamar internamente uma funcao chama malloc(memory allocation = Alocacao de memoria).  

##Processo de funcionamento das areas heap e stack##

1)Stack: A regiao stack é uma area que possui um tamanho pre-definido(geralmente 2mb).Essa area possui uma especie de ponteiro, que ira se locomover a cada elemento que inserimos de acordo com a quantidade de bytes do mesmo. Ou seja, quando inserimos por exemplo um inteiro(que possui 4 bytes), o ponteiro da stack ira se locomover pelos 4 bytes e parar no final do ultimo byte, para que quando formos inserir outro elemento, ele comece a alocar a memoria da posicao em que estiver. Como podemos perceber, os elementos ficam armazenados proximos aos outros como se fosse uma pilha(stack). A insercao na area de stack é extremamente rápida, pois somente é necessario retornar a posicao que o ponteiro está(para que seja localizado o elemento) e mover esse ponteiro para a proxima posicao livre, que no caso sera a quantidade de bytes alocada pelo elemento inserido. Um outro fato importante sobre a area stack, é que a mesma e desalocada automaticamente quando o programa sai do escopo(if,while,else,etc) onde a mesma foi definida, sendo que o processo de desalocação é basicamente mover o ponteiro para a posicao onde estava no momento em que foi inciado o escopo. Com isso se conclui que o processo de alocacao e desalocacao é extremamente rapido.

2)Heap: A regiao heap é uma regiao que tambem possui um tamanho pre-definido, porém que tem a capacidade de se expandir durante a execução do nosso programa. A ideia é que quando iniciarmos nosso programa nos teremos uma quantidade fisica de ram que sera alocada, e teremos por parte do programa uam estrutura chamada "free list", que ira armazenar os blocos de memoria livres para uso, alem de outras informacoes sobre os mesmos, como por exemplo o endereco de memoria, entre outros. Entao quando chamarmos a keyword "new", basicamente sera chamada a funcao malloc que ira buscar nessa "free list" blocos de memoria que possuam pelo menos a quantidade de bytes desejada, sendo que quando for encontrado esse bloco sera retornado o seu endereco de memoria, além de serem realizada algumas outras operações, como por exemplo, marcar como alocado o bloco, definir o tamanho do bloco alocado, entre outros. O problema da alocacão na memoria heap é justamente relacionado com a funcao malloc, que tera que realizar diversas operacoes a mais quando comparado com a alocacao na memoria stack.

##Conclusao##
-Podemos concluir que sempre que for possivel é melhor utilizar a memoria stack no lugar da heap. Existem algumas situacoes em que nao se pode usar a stack, tendo como unica opção a heap, algumas delas são: Quando se necessita que a variavel possa ser utilizada além de seu escopo de definição ou quando se tem uma quantidade de dados muito grande a ser colocada na memoria. 